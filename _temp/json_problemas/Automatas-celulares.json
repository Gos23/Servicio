{"statement":{"language":"es","images":[],"sources":[],"markdown":"# Descripci\u00f3n\nUn aut\u00f3mata celular es un modelo matem\u00e1tico que es \u00fatil para llevar a cabo simulaciones discretas. \u00c9ste consiste de una rejilla donde cada celda es llamada c\u00e9lula, de una asignaci\u00f3n de estados discretos para las c\u00e9lulas, de una descripci\u00f3n de la vecindad de cada c\u00e9lula del aut\u00f3mata y de un conjunto de reglas que permiten actualizar los estados de las c\u00e9lulas del tiempo $t_i$ al tiempo $t_{i + 1}$.\n\nEscribe un programa que implemente un aut\u00f3mata celular con una rejilla de $N \\times N$ c\u00e9lulas con estados binarios &#35; o -. La vecindad de una c\u00e9lula consistir\u00e1 de ella y de las ocho c\u00e9lulas que la rodean (vecindad de Moore) y se debe considerar que la \u00faltima fila es vecina de la primera (de manera circular) mientras que lo mismo ocurre para la \u00faltima y primera columnas.\n\n# Entrada\nEl entero $N$ seguido de una matriz de $N \\times N$ caracteres &#35; o - que denotan los estados de las c\u00e9lulas de la rejilla al tiempo $t_0$. Posteriormente un entero $M$ seguido de $M$ matrices de $3 \\times 3$, una al lado de la otra y separadas por espacios, las cuales denotan las vecindades para las que la c\u00e9lula central en el tiempo $t_i$ se ver\u00e1 como &#35; en el tiempo $t_{i+1}$ (la c\u00e9lula se ver\u00e1 como - para cualquier otra vecindad). Finalmente, un entero $T$. Puedes suponer que $1 \\leq N \\leq 100, 0 \\leq M \\leq 512$ y $0 \\leq T \\leq 10$.\n\n# Salida\nUna matriz de $N \\times N$ caracteres que muestre la rejilla del aut\u00f3mata en el tiempo $T$.\n\n||input\n4\n-#-#\n#-#-\n-#-#\n#-#-\n0\n1\n||output\n----\n----\n----\n----\n||input\n4\n-#-#\n#-#-\n-#-#\n#-#-\n3\n-#-   -#-   ###\n#-#   ###   #-#\n-#-   -#-   ###\n1\n||output\n#-#-\n-#-#\n#-#-\n-#-#\n||input\n4\n####\n#--#\n#--#\n####\n4\n###   ###   #--   --#\n#--   --#   #--   --#\n#--   --#   ###   ###\n1\n||output\n----\n-##-\n-##-\n----\n||input\n4\n####\n#--#\n#--#\n####\n4\n###   ###   #--   --#\n#--   --#   #--   --#\n#--   --#   ###   ###\n2\n||output\n----\n----\n----\n----\n||end\n\n"},"settings":{"cases":{"statement_001":{"in":"4\n-#-#\n#-#-\n-#-#\n#-#-\n0\n1","out":"----\n----\n----\n----","weight":1},"statement_002":{"in":"4\n-#-#\n#-#-\n-#-#\n#-#-\n3\n-#-   -#-   ###\n#-#   ###   #-#\n-#-   -#-   ###\n1","out":"#-#-\n-#-#\n#-#-\n-#-#","weight":1},"statement_003":{"in":"4\n####\n#--#\n#--#\n####\n4\n###   ###   #--   --#\n#--   --#   #--   --#\n#--   --#   ###   ###\n1","out":"----\n-##-\n-##-\n----","weight":1},"statement_004":{"in":"4\n####\n#--#\n#--#\n####\n4\n###   ###   #--   --#\n#--   --#   #--   --#\n#--   --#   ###   ###\n2","out":"----\n----\n----\n----","weight":1}},"limits":{"ExtraWallTime":"0s","MemoryLimit":33554432,"OutputLimit":16384,"OverallWallTimeLimit":"1m0s","TimeLimit":"1s"},"validator":{"name":"token-caseless"}},"problem_id":5949,"title":"Aut\u00f3matas celulares","alias":"Automatas-celulares","input_limit":10240,"visits":0,"submissions":85,"accepted":7,"difficulty":null,"creation_date":1509213475,"source":"UAM Azcapotzalco 2017","order":"normal","visibility":2,"email_clarifications":false,"allow_user_add_tags":true,"show_diff":"none","quality_seal":true,"version":"a7bf2da84b1243824a8f4848bcda2c3c92113410","commit":"df1dd4b1384fd0cd93404648fbee2419ad27ecc0","nominationStatus":{"alreadyReviewed":false,"dismissed":false,"dismissedBeforeAc":false,"nominated":false,"nominatedBeforeAc":false,"language":"","canNominateProblem":false,"solved":false,"tried":false},"problemsetter":{"username":"rcc","classname":"user-rank-international-master","name":"rcc","creation_date":1509213475},"languages":["c11-gcc","c11-clang","cpp11-gcc","cpp11-clang","cpp17-gcc","cpp17-clang","java","py2","py3","rb","cs","pas","hs","lua"],"accepts_submissions":true,"karel_problem":false,"limits":{"input_limit":"10 KiB","memory_limit":"32 MiB","overall_wall_time_limit":"1m0s","time_limit":"1s"},"points":33.33,"score":0,"status":"ok","_id":"6186d39ae709b330509339"}