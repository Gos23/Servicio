{"statement":{"language":"es","images":[],"sources":[],"markdown":"# Descripci\u00f3n\nCierto disco de $D$ bytes est\u00e1 dividido en bloques de $B$ bytes cada uno. Cuentas con el contenido del disco y tambi\u00e9n con la relaci\u00f3n de qu\u00e9 bloques ocupa cada uno de los $N$ archivos. Escribe un programa que imprima el contenido de cada archivo.\n\n# Entrada\nInicialmente, tres enteros $D, B, N$ seguido de $N$ l\u00edneas. La $i$-\u00e9sima l\u00ednea contiene un entero $T$ que denota el tama\u00f1o en bytes del $i$-\u00e9simo archivo, as\u00ed como una secuencia de enteros que denotan los \u00edndices de los bloques que conforman al archivo. Despu\u00e9s de las $N$ l\u00edneas, una cadena de $D$ bytes que denota el contenido del disco. Puedes suponer que $1 \\leq D \\leq 10^7$, que $1 \\leq B \\leq 10^5$, que $1 \\leq N \\leq 50$, que $B$ divide a $D$ y que el disco tiene a lo mucho $100$ bloques. Adem\u00e1s, los \u00edndices de bloques est\u00e1n numerados a partir de $0$ y ning\u00fan bloque se usa por m\u00e1s de un archivo. Considera que el tama\u00f1o $T$ de cada archivo no necesariamente es un m\u00faltiplo de $B$, por lo que el \u00faltimo bloque de cada archivo puede contener basura que no forma parte del archivo en s\u00ed.\n\n# Salida\nPara cada archivo, una cadena que denota su contenido.\n\n# Nota\nYa que OmegaUp vincula la entrada est\u00e1ndar a un archivo, un programa podr\u00e1 leer la entrada m\u00e1s de una vez utilizando rutinas de posicionamiento en archivos (por ejemplo, *fseek* o *rewind*) sobre *stdin* o equivalente.\n\n# Ejemplo\n||input\n10 2 3\n3 1 4\n1 3\n4 2 0\nABCDEFGHIJ\n||output\nCDI\nG\nEFAB\n||description\nHay 5 bloques de 2 bytes cada uno (AB, CD, EF, GH, IJ) y 3 archivos. El primer archivo es de 3 bytes y est\u00e1 almacenado en los bloques (1, 4). El segundo archivo es de 1 byte y est\u00e1 almacenado en el bloque (3). El tercer archivo es de 4 bytes y est\u00e1 almacenado en los bloques (2, 0).\n\nEntonces, el contenido del primer archivo es CDI (sin incluir J), el contenido del segundo archivo es G (sin incluir H) y el contenido del tercer archivo es EFAB.\n||end\n"},"settings":{"cases":{"statement_001":{"in":"10 2 3\n3 1 4\n1 3\n4 2 0\nABCDEFGHIJ","out":"CDI\nG\nEFAB","weight":1}},"limits":{"ExtraWallTime":"0s","MemoryLimit":4194304,"OutputLimit":8912896,"OverallWallTimeLimit":"1m0s","TimeLimit":"1s"},"validator":{"name":"token","tolerance":1.0e-9}},"problem_id":13117,"title":"Leyendo archivos fragmentados con poca memoria","alias":"Leyendo-archivos-fragmentados-co","input_limit":10240,"visits":0,"submissions":69,"accepted":8,"difficulty":2.68061368450896,"creation_date":1619567034,"source":"UAM Azcapotzalco 2021","order":"normal","visibility":2,"email_clarifications":false,"allow_user_add_tags":false,"show_diff":"none","quality_seal":false,"version":"cf86f8c70e227378cde727feddb6684b7cfdb3d0","commit":"8dd6ebd6c475e880660cb50b488c333f4dfaedd3","nominationStatus":{"alreadyReviewed":false,"dismissed":false,"dismissedBeforeAc":false,"nominated":false,"nominatedBeforeAc":false,"language":"","canNominateProblem":false,"solved":false,"tried":false},"problemsetter":{"username":"rcc","classname":"user-rank-international-master","name":"rcc","creation_date":1619567034},"languages":["c11-gcc","c11-clang","cpp11-gcc","cpp11-clang","cpp17-gcc","cpp17-clang","java","py2","py3","rb","cs","pas","hs","lua"],"accepts_submissions":true,"karel_problem":false,"limits":{"input_limit":"10 KiB","memory_limit":"4 MiB","overall_wall_time_limit":"1m0s","time_limit":"1s"},"points":31.55,"score":0,"status":"ok","_id":"6186d3a25460a191093361"}