{"statement":{"language":"es","images":[],"sources":[],"markdown":"# Descripci\u00f3n\nEn tu ciudad, el tren es el transporte m\u00e1s popular y hay tanta demanda que las solicitudes de tickets deben hacerse con un d\u00eda de anticipaci\u00f3n. Desafortunadamente, el tren tiene una capacidad limitada $C$ y es posible que la compa\u00f1\u00eda ferroviaria no pueda admitir todos los pedidos.\n\nCada d\u00eda, el tren comienza en la estaci\u00f3n $0$ y visita las estaciones $1, 2, \\dots... E$ en ese orden. Un pedido de tickets est\u00e1 descrito por los n\u00fameros de las estaciones de origen y destino, adem\u00e1s del n\u00famero de tickets deseados. El ingreso por ticket vendido es el n\u00famero paradas entre las estaciones de origen y destino (incluyendo el destino).  Adem\u00e1s, la pol\u00edtica de la compa\u00f1\u00eda es que un pedido se acepta o se rechaza completo (si se acepta entonces todos sus tickets se venden y si se rechaza entonces ninguno de sus tickets se vende).\n\nEscribe un programa que, dada la informaci\u00f3n de los $P$ pedidos, determine la m\u00e1xima ganancia posible.\n\n# Entrada\nLa entrada consiste de varios casos de prueba, los cuales deben procesarse hasta el fin de archivo. Cada caso comienza con los enteros $C, E, P$ seguidos de $P$ tripletas de enteros $A, B, T$ que denotan la estaci\u00f3n origen, la estaci\u00f3n destino y el n\u00famero de tickets solicitados en cada pedido. Puedes suponer que $0 \\leq C, T \\leq 100,000$, que $0 < E \\leq 7$, que $0 \\leq P \\leq 22$ y que $A < B \\leq E$.\n\n# Salida\nPara cada caso de prueba, un entero que denote la m\u00e1xima ganancia posible.\n\n# Ejemplo\n||input\n10 3 4\n0 2 1\n1 3 5\n1 2 7\n2 3 10\n10 5 4\n3 5 10\n2 4 9\n0 2 5\n2 5 8\n||output\n19\n34\n||end\n"},"settings":{"cases":{"statement_001":{"in":"10 3 4\n0 2 1\n1 3 5\n1 2 7\n2 3 10\n10 5 4\n3 5 10\n2 4 9\n0 2 5\n2 5 8","out":"19\n34","weight":1}},"limits":{"ExtraWallTime":"0s","MemoryLimit":33554432,"OutputLimit":49152,"OverallWallTimeLimit":"1m0s","TimeLimit":"500ms"},"validator":{"name":"token-caseless"}},"problem_id":6518,"title":"Transporte","alias":"Transporte","input_limit":10240,"visits":0,"submissions":146,"accepted":3,"difficulty":null,"creation_date":1518911721,"source":"(Adaptaci\u00f3n) Regional del ACM, Europa Central 1995","order":"normal","visibility":2,"email_clarifications":false,"allow_user_add_tags":true,"show_diff":"none","quality_seal":true,"version":"abcdcff36123c833f61e519f85e18b321e0b7843","commit":"3b96fbf4114391559b1e8dccffed8174d977c8fc","nominationStatus":{"alreadyReviewed":false,"dismissed":false,"dismissedBeforeAc":false,"nominated":false,"nominatedBeforeAc":false,"language":"","canNominateProblem":false,"solved":false,"tried":false},"problemsetter":{"username":"rcc","classname":"user-rank-international-master","name":"rcc","creation_date":1518911721},"languages":["c11-gcc","c11-clang","cpp11-gcc","cpp11-clang","cpp17-gcc","cpp17-clang","java","py2","py3","rb","cs","pas","hs","lua"],"accepts_submissions":true,"karel_problem":false,"limits":{"input_limit":"10 KiB","memory_limit":"32 MiB","overall_wall_time_limit":"1m0s","time_limit":"500ms"},"points":50,"score":0,"status":"ok","_id":"6186d39b3f97d670843457"}