{"statement":{"language":"es","images":[],"sources":[],"markdown":"# Descripci\u00f3n\nEn l\u00f3gica difusa, la fuerza con la que una regla difusa se cumple es un real en el intervalo $[0, 1]$ y cada regla hace referencia a una funci\u00f3n con el mismo codominio. Durante el proceso de desdifusificaci\u00f3n, el \u00e1rea debajo de la curva de la funci\u00f3n se sombrea a partir de una altura $Y$ que es igual a la fuerza de su regla. Lo anterior se hace para todas las reglas del sistema. Al final se obtiene un pol\u00edgono (no necesariamente conexo) y un algoritmo de desdifusificaci\u00f3n consiste en encontrar la $X$ tal que una l\u00ednea vertical en esa posici\u00f3n bisecta al pol\u00edgono en dos partes cuyas \u00e1reas sombreadas son de la misma magnitud.\n\nEscribe un programa que implemente dicho algoritmo de desdifusificaci\u00f3n. La entrada consistir\u00e1 de $N$ reglas, donde cada regla est\u00e1 descrita por los puntos $(X_1, X_2, X_3)$ de una funci\u00f3n triangular y un valor $Y$ que es la fuerza con la que se cumple la regla. Una funci\u00f3n triangular $(X_1, X_2, X_3)$ se ve en el plano cartesiano como el tri\u00e1ngulo con v\u00e9rtices en $(X_1, 0), (X_2, 1), (X_3, 0)$.\n\n# Entrada\nEl entero $N$ seguido de las $N$ reglas descritas como una cuadrupleta de reales $X_1, X_2, X_3, Y$. Puedes suponer que $1 \\leq N \\leq 100$ adem\u00e1s de que $0 \\leq X_1 < X_2 < X_3 \\leq 1000$ y $0 \\leq Y \\leq 1$ para todas las reglas.\n\n# Salida\nUn real que es la coordenada $X$ de la recta vertical que bisecta el pol\u00edgono. La salida se considerar\u00e1 correcta si coindice con el valor exacto con una precisi\u00f3n de un decimal.\n\n# Ejemplo\n||input\n1\n5 10 15 1\n||output\n10\n||input\n2\n5 10 15 1\n6 11 16 0.5\n||output\n10.9\n||end\n"},"settings":{"cases":{"statement_001":{"in":"1\n5 10 15 1","out":"10","weight":1},"statement_002":{"in":"2\n5 10 15 1\n6 11 16 0.5","out":"10.9","weight":1}},"limits":{"ExtraWallTime":"0s","MemoryLimit":33554432,"OutputLimit":20240,"OverallWallTimeLimit":"1m0s","TimeLimit":"1.5s"},"validator":{"name":"custom","custom_validator":{"source":"","language":"cpp","limits":{"ExtraWallTime":"0s","MemoryLimit":268435456,"OutputLimit":20240,"OverallWallTimeLimit":"1m0s","TimeLimit":"1s"}}}},"problem_id":5834,"title":"Bisecci\u00f3n de un pol\u00edgono","alias":"Biseccion-de-un-poligono","input_limit":10240,"visits":0,"submissions":120,"accepted":9,"difficulty":null,"creation_date":1508386081,"source":"UAM Azcapotzalco 2017","order":"normal","visibility":2,"email_clarifications":false,"allow_user_add_tags":true,"show_diff":"none","quality_seal":true,"version":"a022147f1c4a82416081cd9e262b0aa78cc4ca00","commit":"f8ace30dfaf1d6725302aa747a60e80208b4816f","nominationStatus":{"alreadyReviewed":false,"dismissed":false,"dismissedBeforeAc":false,"nominated":false,"nominatedBeforeAc":false,"language":"","canNominateProblem":false,"solved":false,"tried":false},"problemsetter":{"username":"rcc","classname":"user-rank-international-master","name":"rcc","creation_date":1508386081},"languages":["c11-gcc","c11-clang","cpp11-gcc","cpp11-clang","cpp17-gcc","cpp17-clang","java","py2","py3","rb","cs","pas","hs","lua"],"accepts_submissions":true,"karel_problem":false,"limits":{"input_limit":"10 KiB","memory_limit":"32 MiB","overall_wall_time_limit":"1m0s","time_limit":"1.5s"},"points":30.1,"score":0,"status":"ok","_id":"6186d39a920f9339870293"}