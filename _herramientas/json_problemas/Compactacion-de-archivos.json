{"statement":{"language":"es","images":[],"sources":[],"markdown":"# Descripci\u00f3n\nTienes una base de datos de personas y has estado borrando muchos registros \u00faltimamente. Sin embargo, cuando borras un registro la implementaci\u00f3n de tu base de datos s\u00f3lo lo marca como borrado y el tama\u00f1o del archivo jam\u00e1s ha disminuido. Para recuperar ese espacio, deseas reconstruir el archivo sin incluir los registros borrados.\n\nEl archivo consta de un entero $N$ seguido de dos secuencias (la primera de enteros y la segunda de cadenas). El entero $N$ denota la cantidad de registros del archivo, incluyendo los registros borrados. La primera secuencia contiene, para cada uno de los $N$ registros, tres enteros $I_{nombre}$, $I_{apellido}$, $B$ donde $B$ es $1$ si el registro ha sido borrado y $0$ en otro caso, mientras que $I_{nombre}, I_{apellido}$ son \u00edndices sobre la segunda secuencia (numerados desde cero). La segunda secuencia contiene $2N$ cadenas que denotan los nombres o apellidos de las personas cuyos registros hacen referencia a ellas. Se sabe que cada cadena es referida exactamente una vez.\n\nEscribe un programa que lea los datos del archivo actual y genere un archivo que no contenga los registros borrados ni las cadenas referidas por los mismos.\n\n# Entrada\nUn entero $N$ seguido de la informaci\u00f3n de los $N$ registros y posteriormente las $2N$ cadenas. Puedes suponer que $0 \\leq N \\leq 10^5$, que todas las cadenas son alfab\u00e9ticas de entre $1$ y $16$ caracteres y que no existen duplicados.\n\n# Salida\nUn entero $M$ seguido de la informaci\u00f3n de los $M$ registros no borrados y posteriormente las $2M$ cadenas que satisfacen la relaci\u00f3n dada en la entrada. La compactaci\u00f3n debe ser estable, es decir, si el registro $r_1$ aparece antes que el registro $r_2$ en la entrada y ninguno de los dos fue borrado, entonces $r_1$ debe aparecer antes que $r_2$ en la salida. Lo mismo debe cumplirse para las cadenas.\n\n# Ejemplo\n||input\n2\n0 3 1\n2 1 0\nPablo\nPerez\nJuan\nGomez\n||output\n1\n1 0 0\nPerez\nJuan\n||description\nLa primera persona es \"Pablo Gomez\" mientras que la segunda persona es \"Juan Perez\". La primera persona fue borrada y no debe aparecer en la salida.\n||end\n\n# Nota\nYa que OmegaUp vincula la entrada est\u00e1ndar a un archivo, un programa podr\u00e1 leer la entrada m\u00e1s de una vez utilizando rutinas de posicionamiento en archivos (por ejemplo, *fseek* o *rewind*).\n"},"settings":{"cases":{"statement_001":{"in":"2\n0 3 1\n2 1 0\nPablo\nPerez\nJuan\nGomez","out":"1\n1 0 0\nPerez\nJuan","weight":1}},"limits":{"ExtraWallTime":"0s","MemoryLimit":2883584,"OutputLimit":1757184,"OverallWallTimeLimit":"1m0s","TimeLimit":"1s"},"validator":{"name":"token-caseless"}},"problem_id":5261,"title":"Compactaci\u00f3n de archivos","alias":"Compactacion-de-archivos","input_limit":10240,"visits":0,"submissions":31,"accepted":5,"difficulty":null,"creation_date":1489681409,"source":"UAM Azcapotzalco 2017","order":"normal","visibility":2,"email_clarifications":false,"allow_user_add_tags":true,"show_diff":"none","quality_seal":true,"version":"c106a3f73ba2c06cb9066a27564ddaa1e5d7592f","commit":"492e9b751abb38e0193a9302730234294a993a2c","nominationStatus":{"alreadyReviewed":false,"dismissed":false,"dismissedBeforeAc":false,"nominated":false,"nominatedBeforeAc":false,"language":"","canNominateProblem":false,"solved":false,"tried":false},"problemsetter":{"username":"rcc","classname":"user-rank-international-master","name":"rcc","creation_date":1489681409},"languages":["c11-gcc","c11-clang","cpp11-gcc","cpp11-clang","cpp17-gcc","cpp17-clang","java","py2","py3","rb","cs","pas","hs","lua"],"accepts_submissions":true,"karel_problem":false,"limits":{"input_limit":"10 KiB","memory_limit":"2.75 MiB","overall_wall_time_limit":"1m0s","time_limit":"1s"},"points":38.69,"score":0,"status":"ok","_id":"6186d3997ed91129496179"}