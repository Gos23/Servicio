{"statement":{"language":"es","images":[],"sources":[],"markdown":"# Descripci\u00f3n\nUn pal\u00edndromo es una cadena cuya inversi\u00f3n es igual a la original (por ejemplo, *RADAR* es un pal\u00edndromo porque se lee igual al derecho y al rev\u00e9s). Dada una cadena $S$ que no es un pal\u00edndromo, podemos obtener un pal\u00edndromo si excluimos algunos de sus caracteres (por ejemplo, de *BANANA* es posible obtener el pal\u00edndromo *ANNA* si excluimos los caracteres en las posiciones 1 y 4).\n\nDado un conjunto de posiciones especiales de $S$, queremos encontrar un pal\u00edndromo de $S$ que incluya la mayor cantidad posible de sus posiciones especiales. En caso de que varios pal\u00edndromos incluyan la misma cantidad de posiciones especiales, nos interesa s\u00f3lo el pal\u00edndromo m\u00e1s grande. Escribe un programa que calcule la longitud de dicho pal\u00edndromo.\n\n# Entrada\nLa entrada consiste de varios casos de prueba, los cuales deben procesarse hasta el fin de archivo. Cada caso de prueba consiste de una cadena no vac\u00eda $S$, un entero $N$ y posteriormente una secuencia de $N$ enteros que denotan las posiciones especiales de $S$. Puedes suponer que $0 \\leq N \\leq |S| \\leq 2000$, que $S$ est\u00e1 formada \u00fanicamente por letras may\u00fasculas y que las posiciones especiales est\u00e1n en el rango de $1$ a $|S|$.\n\n# Salida\nPara cada caso de prueba, un entero que sea la longitud del pal\u00edndromo m\u00e1s grande que incluya la mayor cantidad posible de posiciones especiales.\n\n# Ejemplo\n||input\nBANANAS\n0\nBANANAS\n1 7\nACDAAACX\n3 2 3 8\nMARATONA\n4 3 1 5 2\n||output\n5\n1\n3\n3\n||end\n"},"settings":{"cases":{"statement_001":{"in":"BANANAS\n0\nBANANAS\n1 7\nACDAAACX\n3 2 3 8\nMARATONA\n4 3 1 5 2","out":"5\n1\n3\n3","weight":1}},"limits":{"ExtraWallTime":"0s","MemoryLimit":33554432,"OutputLimit":16384,"OverallWallTimeLimit":"1m0s","TimeLimit":"3s"},"validator":{"name":"token-caseless"}},"problem_id":6600,"title":"Pal\u00edndromos","alias":"Palindromos-uva","input_limit":10240,"visits":0,"submissions":56,"accepted":3,"difficulty":null,"creation_date":1520094544,"source":"(Adaptaci\u00f3n) UVA Online Judge","order":"normal","visibility":2,"email_clarifications":false,"allow_user_add_tags":true,"show_diff":"none","quality_seal":true,"version":"b3dd57cb5fea027a103c5dd702cd0fce0fd02054","commit":"243510bf26050c8ea9b0e41a03eff096778b5dee","nominationStatus":{"alreadyReviewed":false,"dismissed":false,"dismissedBeforeAc":false,"nominated":false,"nominatedBeforeAc":false,"language":"","canNominateProblem":false,"solved":false,"tried":false},"problemsetter":{"username":"rcc","classname":"user-rank-international-master","name":"rcc","creation_date":1520094544},"languages":["c11-gcc","c11-clang","cpp11-gcc","cpp11-clang","cpp17-gcc","cpp17-clang","java","py2","py3","rb","cs","pas","hs","lua"],"accepts_submissions":true,"karel_problem":false,"limits":{"input_limit":"10 KiB","memory_limit":"32 MiB","overall_wall_time_limit":"1m0s","time_limit":"3s"},"points":50,"score":0,"status":"ok","_id":"6186d39b87a6d361575338"}