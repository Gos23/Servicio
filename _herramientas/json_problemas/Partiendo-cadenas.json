{"statement":{"language":"es","images":[],"sources":[],"markdown":"# Descripci\u00f3n\nTienes una cadena que has ido construyendo a lo largo de los a\u00f1os y ya es muy larga. Desafortunadamente, en tu ciudad acaban de promulgar una ley que obliga a todos los due\u00f1os de cadenas largas a reducir su tama\u00f1o. La pol\u00edtica es que el due\u00f1o de la cadena se ver\u00e1 obligado a borrar todas las apariciones de un caracter de su elecci\u00f3n (el caracter debe aparecer en la cadena, sino es trampa), lo cual tiene el efecto de partir la cadena en pedazos. Por ejemplo, si se borran todas las apariciones de \"t\" de la cadena \"gatitos\" entonces se forman las cadenas \"ga\", \"i\", \"os\" mientras que si se borran todas las apariciones de \"a\" se forman las cadenas \"g\" y \"titos\". Tu deseo es que, despu\u00e9s de aplicar la operaci\u00f3n, tengas una cadena del mayor tama\u00f1o posible. Escribe un programa que te ayude a conseguir tu objetivo.\n\n# Entrada\nUna cadena de caracteres ASCII gr\u00e1ficos seguida de un salto de l\u00ednea. Puedes suponer que la cadena tiene a lo mucho $10^7$ caracteres.\n\n# Salida\nUn entero que es el tama\u00f1o de la cadena m\u00e1s larga que puedes conservar despu\u00e9s de aplicar la operaci\u00f3n.\n\n# Ejemplo\n||input\na@aaaaa!aaaaa@a\n||output\n11\n||description\nSi decides borrar las apariciones de \"a\", las cadenas resultantes son \"@\", \"!\" y \"@\".\n\nSi decides borrar las apariciones de \"@\", las cadenas resultantes son \"a\", \"aaaaa!aaaaa\" y \"a\".\n\nSi decides borrar las apariciones de \"!\", las cadenas resultantes son \"a@aaaaa\" y \"aaaaa@a\".\n\nLa cadena m\u00e1s larga que puedes conservar es \"aaaaa!aaaaa\" de longitud 11.\n||input\ngatitos\n||output\n6\n||end\n"},"settings":{"cases":{"statement_001":{"in":"a@aaaaa!aaaaa@a","out":"11","weight":1},"statement_002":{"in":"gatitos","out":"6","weight":1}},"limits":{"ExtraWallTime":"0s","MemoryLimit":100663296,"OutputLimit":16384,"OverallWallTimeLimit":"1m0s","TimeLimit":"1s"},"validator":{"name":"token-caseless"}},"problem_id":6385,"title":"Partiendo cadenas","alias":"Partiendo-cadenas","input_limit":10240,"visits":0,"submissions":694,"accepted":46,"difficulty":1.9311163090549734,"creation_date":1516832715,"source":"UAM Azcapotzalco 2018","order":"normal","visibility":2,"email_clarifications":false,"allow_user_add_tags":false,"show_diff":"none","quality_seal":true,"version":"97ea4bf5e0c429d159019379df40a3fd85f7c230","commit":"20d96cf20e3ea5f19dbbd1a52074c208330f2f48","nominationStatus":{"alreadyReviewed":false,"dismissed":false,"dismissedBeforeAc":false,"nominated":false,"nominatedBeforeAc":false,"language":"","canNominateProblem":false,"solved":false,"tried":false},"problemsetter":{"username":"rcc","classname":"user-rank-international-master","name":"rcc","creation_date":1516832715},"languages":["c11-gcc","c11-clang","cpp11-gcc","cpp11-clang","cpp17-gcc","cpp17-clang","java","py2","py3","rb","cs","pas","hs","lua"],"accepts_submissions":true,"karel_problem":false,"limits":{"input_limit":"10 KiB","memory_limit":"96 MiB","overall_wall_time_limit":"1m0s","time_limit":"1s"},"points":18,"score":0,"status":"ok","_id":"6186d39ae7e97569836809"}